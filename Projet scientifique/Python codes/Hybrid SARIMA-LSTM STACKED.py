# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zZ_kIKJLADbDrmwAKXl8ngB_yefu5hBm
"""

# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
import numpy as np
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.layers import LSTM
# %matplotlib inline




# Load the dataset
df = pd.read_csv("sales_data.csv")

# Select only the rows for the furniture category
df = df[df["Category"] == "Furniture"]

# Convert the Order Date column to a datetime data type and set it as the index of the DataFrame
df["Order Date"] = pd.to_datetime(df["Order Date"])
df.set_index("Order Date", inplace=True)

# Resample the data to a monthly frequency, taking the sum of all daily sales values in each month
monthly_sales = (df["Sales"].resample("M").sum())/30

result2 = seasonal_decompose(monthly_sales, model='additive')

print(print(result2.resid))

# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
import numpy as np
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.layers import LSTM
# %matplotlib inline



# Load the dataset
df = pd.read_csv("sales_data.csv")

# Select only the rows for the furniture category
df = df[df["Category"] == "Furniture"]

# Convert the Order Date column to a datetime data type and set it as the index of the DataFrame
df["Order Date"] = pd.to_datetime(df["Order Date"])
df.set_index("Order Date", inplace=True)

# Resample the data to a monthly frequency, taking the sum of all daily sales values in each month
monthly_sales = (df["Sales"].resample("M").sum())/30

# Perform the decomposition
result1 = seasonal_decompose(monthly_sales, model='additive')

# Extract the trend, seasonal, and residual components
trend = result1.trend
seasonal = result1.seasonal
residual = result1.resid
LSTM_data = result1.resid
Sarima_data = monthly_sales - residual
# Split the data into training and test sets
train = Sarima_data.iloc[:36]
test = Sarima_data.iloc[36:]

# Fit the SARIMA model to the training data
model = SARIMAX(train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
model_fit = model.fit()

# Make predictions on the test set
predictions = model_fit.predict(start=test.index[0], end=test.index[-1])

#LSTM RISIDUAL TRAINING:
df_close = LSTM_data
df_close = df_close.replace(np.nan, 0)
scaler = MinMaxScaler(feature_range = (0,1))
df_close = scaler.fit_transform(np.array(df_close).reshape(-1,1))
#Split the data into train and test split
training_size = int(len(df_close) * 0.75)
test_size = len(df_close) - training_size
train_data, test_data = df_close[0:training_size,:], df_close[training_size:len(df_close),:1]
def create_dataset(dataset, time_step = 1):
    dataX, dataY = [], []
    for i in range(len(dataset) - time_step ):
        a = dataset[i]
        dataX.append(a)
        dataY.append(dataset[i+time_step, 0])
    return np.array(dataX), np.array(dataY)

time_step = 1
x_train, y_train = create_dataset(train_data, time_step)
x_test, y_test = create_dataset(test_data, time_step)
#Reshape the input to be [samples, time steps, features] which is the requirement of LSTM
x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)
#Create the LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences = True, input_shape = (100,1)))
model.add(LSTM(50, return_sequences = True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss = 'mean_squared_error', optimizer = 'adam')
model.summary()
model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs = 20, batch_size = 64, verbose = 1)
#Lets predict and check performance metrics
x_train = np.nan_to_num(x_train)
x_test = np.nan_to_num(x_test)
train_predict = model.predict(x_train)
test_predict = model.predict(x_test)
#Transform back to original form
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

print(test_predict)
print(predictions)
print(monthly_sales[36:])

import math
S=[]
L1 =[-197.73859,0, -193.83803, -196.633, -197.42377, -193.56693, -191.24695, 0 , 0 , 194.31691 ,194.31691  , 0]
L2 =[336.168372, 209.908355, 457.082640, 413.973402, 504.784715, 491.690359, 525.892043, 435.925919, 968.364572, 509.468054, 1041.105859, 1110.038003]
for i in range(12):
  S.append(L1[i]+L2[i])
test1 = monthly_sales[36:]
# Evaluate the model's performance
mse = (((S - test1) ** 2).sum())/12
rmse = mse ** 0.5
mape = (abs(predictions - test1) / test1).mean()
print("MSE: ", mse)
print("RMSE: ", rmse)
print("MAPE: ", mape)
#print(monthly_sales)
#print(S)
T=[]
for i in range(36):
  T.append(math.nan)
W=T+S
plt.plot(monthly_sales.tolist())
plt.plot(W)
plt.show()